name: Build Android APK

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'capacitor.config.ts'
      - 'vite.config.ts'
      - 'index.html'
  workflow_dispatch:
    inputs:
      deploy_to_store:
        description: 'Deploy to Solana dApp Store'
        required: false
        type: boolean
        default: false

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Build PWA
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          VITE_SUPABASE_PROJECT_ID: ${{ secrets.VITE_SUPABASE_PROJECT_ID }}
      
      - name: Setup Capacitor
        run: |
          npx cap add android || true
          npx cap sync android
      
      - name: Decode Android Keystore
        if: github.event.inputs.deploy_to_store == 'true'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/app/strun-release.keystore
      
      - name: Build Debug APK
        if: github.event.inputs.deploy_to_store != 'true'
        run: |
          cd android
          chmod +x gradlew
          ./gradlew assembleDebug
      
      - name: Build Release APK
        if: github.event.inputs.deploy_to_store == 'true'
        run: |
          cd android
          chmod +x gradlew
          ./gradlew assembleRelease
        env:
          STRUN_RELEASE_STORE_FILE: strun-release.keystore
          STRUN_RELEASE_STORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          STRUN_RELEASE_KEY_ALIAS: strun-key
          STRUN_RELEASE_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      
      - name: Copy APK to Publishing Directory
        if: github.event.inputs.deploy_to_store == 'true'
        run: |
          mkdir -p publishing/files
          cp android/app/build/outputs/apk/release/app-release.apk publishing/files/strun-release.apk
      
      - name: Upload Debug APK
        if: github.event.inputs.deploy_to_store != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: strun-debug-${{ github.sha }}
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 7
      
      - name: Upload Release APK
        if: github.event.inputs.deploy_to_store == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: strun-release-${{ github.sha }}
          path: publishing/files/strun-release.apk
          retention-days: 30
      
      - name: Setup Publishing Environment
        if: github.event.inputs.deploy_to_store == 'true'
        run: |
          cd publishing
          npm init -y
          npm install --save-dev @solana-mobile/dapp-store-cli
          
          # Create .env file
          echo "ANDROID_TOOLS_DIR=\"$ANDROID_HOME/build-tools/34.0.0\"" > .env
          echo "JAVA_HOME=\"$JAVA_HOME\"" >> .env
          echo "SOLANA_RPC_URL=\"https://api.mainnet-beta.solana.com\"" >> .env
          echo "SOLANA_KEYPAIR_PATH=\"./keypair.json\"" >> .env
          echo "PRIORITY_FEE_LAMPORTS=500000" >> .env
      
      - name: Setup Solana Keypair
        if: github.event.inputs.deploy_to_store == 'true'
        run: |
          cd publishing
          echo '${{ secrets.SOLANA_PUBLISHER_KEYPAIR }}' > keypair.json
          chmod 600 keypair.json
      
      - name: Validate Publishing Config
        if: github.event.inputs.deploy_to_store == 'true'
        run: |
          cd publishing
          npx dapp-store validate -k keypair.json -b $ANDROID_HOME/build-tools/34.0.0
      
      - name: Create Release NFT
        if: github.event.inputs.deploy_to_store == 'true'
        id: create_release
        run: |
          cd publishing
          RELEASE_OUTPUT=$(npx dapp-store create release \
            -k keypair.json \
            -b $ANDROID_HOME/build-tools/34.0.0 \
            -u https://api.mainnet-beta.solana.com \
            -p 500000 2>&1)
          
          echo "$RELEASE_OUTPUT"
          
          # Extract release address from output
          RELEASE_ADDRESS=$(echo "$RELEASE_OUTPUT" | grep -oP 'Release address: \K[A-Za-z0-9]+' || echo "")
          
          if [ -z "$RELEASE_ADDRESS" ]; then
            echo "Failed to extract release address"
            exit 1
          fi
          
          echo "RELEASE_ADDRESS=$RELEASE_ADDRESS" >> $GITHUB_ENV
          echo "release_address=$RELEASE_ADDRESS" >> $GITHUB_OUTPUT
      
      - name: Submit to dApp Store
        if: github.event.inputs.deploy_to_store == 'true'
        run: |
          cd publishing
          npx dapp-store publish submit \
            -k keypair.json \
            -u https://api.mainnet-beta.solana.com \
            --requestor-is-authorized \
            --complies-with-solana-dapp-store-policies
      
      - name: Create GitHub Release
        if: github.event.inputs.deploy_to_store == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: Strun v1.0.${{ github.run_number }}
          files: publishing/files/strun-release.apk
          body: |
            ## 🚀 Strun Release v1.0.${{ github.run_number }}
            
            ### 📱 Installation
            - **Solana dApp Store**: Submitted for review
            - **Direct APK**: Download attached `strun-release.apk`
            
            ### 🔗 Solana Release NFT
            - **Address**: `${{ env.RELEASE_ADDRESS }}`
            - **Explorer**: https://explorer.solana.com/address/${{ env.RELEASE_ADDRESS }}
            
            ### ✨ Features
            - GPS run tracking with territory claiming
            - AI-generated tasks with SOL rewards
            - Land NFT minting on Solana
            - Community feed and social features
            - Solana Mobile Wallet Adapter integration
            
            ### 📋 Requirements
            - Android 7.0 (API 24) or higher
            - Solana wallet (Phantom, Solflare, etc.)
            - Location permissions
            
            ### 🔐 Verification
            Package: `app.strun.mobile`
            Version: 1.0.${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Cleanup Sensitive Files
        if: always()
        run: |
          rm -f android/app/strun-release.keystore
          rm -f publishing/keypair.json
      
      - name: Deployment Summary
        if: github.event.inputs.deploy_to_store == 'true'
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Release NFT**: \`${{ env.RELEASE_ADDRESS }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Explorer**: https://explorer.solana.com/address/${{ env.RELEASE_ADDRESS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Submitted to Solana dApp Store (pending review)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Join Solana Mobile Discord: https://discord.gg/solanamobile" >> $GITHUB_STEP_SUMMARY
          echo "2. Get developer role in #developer channel" >> $GITHUB_STEP_SUMMARY
          echo "3. Post submission in #dapp-store channel" >> $GITHUB_STEP_SUMMARY

# Required GitHub Secrets:
# - VITE_SUPABASE_URL
# - VITE_SUPABASE_PUBLISHABLE_KEY
# - VITE_SUPABASE_PROJECT_ID
# - SOLANA_PUBLISHER_KEYPAIR (for dApp Store deployment)
# - ANDROID_KEYSTORE_BASE64 (for release builds)
# - KEYSTORE_PASSWORD (for release builds)
# - KEY_PASSWORD (for release builds)
